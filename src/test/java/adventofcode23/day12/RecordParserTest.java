package adventofcode23.day12;

import adventofcode23.day11.GalaxyParser;
import adventofcode23.lib.ParserResult;
import adventofcode23.lib.ResourceReader;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class RecordParserTest {



    @Test
    @DisplayName("RecordParser")
    public void testRecordParser() {


        ResourceReader reader = new ResourceReader();
        String fileName = "input/day12/testinput.txt";

        RecordParser parser;

        parser = new RecordParser();

      // assertEquals(4, parser.compute("????????? 3,1,2"));
      /* assertEquals(10, parser.compute("??????? 2,1"));
        assertEquals(7, parser.compute("??????? 1"));
        assertEquals(6, parser.compute("??????? 2"));
        assertEquals(10, parser.compute("??????? 2,1"));
*/

     assertEquals(22, parser.compute("???.??????? 1,1,1,2"));

     assertEquals(4, parser.compute("??????? 1,1,2"));

     assertEquals(10, parser.compute("??????? 1,2"));
     assertEquals(14, parser.compute("#??.??????? 1,1,1,2"));

     assertEquals(28, parser.compute("#??.???????.???#?#?? 1,1,1,2,4,1"));
        assertEquals(4, parser.compute(".??#????.? 2,1"));

        assertEquals(3, parser.compute("?#??#????.????# 8,1,1"));

       assertEquals(1, parser.compute("??? 1,1"));
        assertEquals(1, parser.compute("?? 2"));
        assertEquals(2, parser.compute("?? 1"));
        assertEquals(3, parser.compute("??? 1"));


        assertEquals(15, parser.compute("??????? 1,1"));

        assertEquals(1, parser.compute("??????? 5,1"));

        assertEquals(7, parser.compute("???????.??????? 5,1,1"));

        assertEquals(7, parser.compute("???????.???????.??????? 5,1,5,1,1"));

        assertEquals(4, parser.compute(".??..??...???. 1,1,3"));

        assertEquals(1, parser.compute("???.### 1,1,3"));

        assertEquals(4, parser.compute(".??..??...?##. 1,1,3"));

        //assertEquals(1, parser.compute("???##???#?#?# 2,1,1,1,3"));


        assertEquals(1, parser.compute("?#?#?#?#?#?#?#? 1,3,1,6"));

        assertEquals(1, parser.compute("????.#...#... 4,1,1"));

        assertEquals(4, parser.compute("????.######..#####. 1,6,5"));

        assertEquals(10, parser.compute("?###???????? 3,2,1"));

        assertEquals(2, parser.compute("?###??? 3,1"));

        assertEquals(2, parser.compute("?#.?..?.##.###? 2,1,2,3"));
        assertEquals(3, parser.compute("??????##?.? 2,5,1"));
        assertEquals(6, parser.compute("????#??.##????? 1,3,7"));
        assertEquals(15, parser.compute("????????#??? 2,3"));
        assertEquals(6, parser.compute("?#.?.????.#????#?? 2,3,1,4"));
        assertEquals(7, parser.compute("????.??.#?#? 2,1,4"));
        assertEquals(1, parser.compute(".#.#?#?????# 1,5,1,1"));
        assertEquals(4, parser.compute(".??.??..#?#??#????. 1,1,1,1,6"));
        assertEquals(4, parser.compute("#??####????..#??? 7,2,1,1"));
        assertEquals(3, parser.compute("?#??#????????.???? 4,2,1,2,2"));
        assertEquals(4, parser.compute("..?.???.#?.#? 1,1,2,1"));
        assertEquals(1, parser.compute("#???#??#??##? 2,1,2,4"));
        assertEquals(1, parser.compute("?#???#??#.??# 1,1,2,3"));
        assertEquals(1, parser.compute("?..??????# 1,5,1"));
        assertEquals(3, parser.compute(".?.#??#????. 4,1"));
        assertEquals(3, parser.compute("????#??##.????? 3,5,2,1"));
        assertEquals(21, parser.compute("?###.?#???????#??? 4,2,1,3"));
        assertEquals(2, parser.compute("?.???#??...? 1,5,1"));
        assertEquals(4, parser.compute("?.#??????##?##???? 2,10"));
        assertEquals(4, parser.compute(".###?????#??#?. 4,1,2,2"));
        assertEquals(3, parser.compute(".??#????#..?.?# 3,1,1,1,1"));
        assertEquals(7, parser.compute(".?#?#.?????#?.#? 4,1,2,2"));
        assertEquals(2, parser.compute(".??.#?###?#???.#? 1,9,2"));
        assertEquals(3, parser.compute("?????#.??????. 4,1,1,3"));
        assertEquals(8, parser.compute("???#????#??.??#?# 3,3,4"));
        assertEquals(3, parser.compute("??..?#..?..? 2,1,1"));
        assertEquals(2, parser.compute("?.???#.?#??#? 1,1,1,6"));
        assertEquals(5, parser.compute("????#????????#?#?? 10,4"));
        assertEquals(1, parser.compute("??????#?#??..#?. 1,1,7,2"));
        assertEquals(7, parser.compute(".???##??.??#??.? 4,1,3,1"));
        assertEquals(6, parser.compute(".???#?##?.??? 6,1"));
        assertEquals(3, parser.compute("????#??##??.????#. 2,5,5"));
        assertEquals(314, parser.compute("??????.???????? 1,1,1,1,1"));
        assertEquals(2, parser.compute("???.?#??#??#? 3,4,2"));
        assertEquals(4, parser.compute(".????#?##??.? 8,1"));
        assertEquals(4, parser.compute("???#?????####?#???.? 1,9"));
        assertEquals(7, parser.compute("?..???#??? 1,4"));
        assertEquals(2, parser.compute("?#???#?#?##.. 2,6"));
        assertEquals(2, parser.compute("?.???#????##???#??.# 1,1,1,1,9,1"));
        assertEquals(6, parser.compute("?.???#?###?.?..???? 8,2"));
        assertEquals(3, parser.compute("#???.?##???.???? 2,6,2"));
        assertEquals(1, parser.compute(".#.??####?##?.?#? 1,7,3"));
        assertEquals(2, parser.compute("##??#???###?#??? 5,1,3,1,1"));
        assertEquals(7, parser.compute("??#???##???????..??. 13,1"));
        assertEquals(10, parser.compute("???.#.?????? 1,1,4"));
        assertEquals(10, parser.compute("??????#???????? 2,5,4"));
        assertEquals(5, parser.compute("??????.??#? 2,1"));
        assertEquals(16, parser.compute(".?.????.???. 1,1,1,1"));
        assertEquals(9, parser.compute("???.??##..?.?????.? 1,3,3"));
        assertEquals(1, parser.compute("#?####???? 1,5"));
        assertEquals(4, parser.compute("?.??.???.?????? 1,1,2,4,1"));
        assertEquals(6, parser.compute("...#???????#??#?? 2,1,7"));
        assertEquals(1, parser.compute(".??#??.#?#.????# 3,1,1,1,4"));
        assertEquals(1, parser.compute("?#??#???##???#???.?. 1,7,1,1,2,1"));
        assertEquals(4, parser.compute(".??..##??#?#?#????? 2,2,2,1,1,1"));
        assertEquals(2, parser.compute(".???#???..??.#???? 6,3"));
        assertEquals(2, parser.compute("??.###.??. 3,1"));
        assertEquals(1, parser.compute("??##???#???.?. 7,2,1"));
        assertEquals(1, parser.compute("?.?.?#??#. 1,1"));
        assertEquals(2, parser.compute("#??###?.???#????#? 1,5,8"));
        assertEquals(3, parser.compute("#?##???#??##??#?? 4,10"));
        assertEquals(1, parser.compute("?#??..?#??##?????. 1,11"));
        assertEquals(1, parser.compute("???#.???.??##?. 4,3,1,3"));
        assertEquals(4, parser.compute(".?#?.?#.??. 2,2,1"));
        assertEquals(15, parser.compute("??.??###???.??????. 6,2"));
        assertEquals(3, parser.compute("??#??#.??????? 6,5"));
        assertEquals(2, parser.compute("..?????.??? 5,2"));
        assertEquals(2, parser.compute("?..?#..???. 1,2,2"));
        assertEquals(3, parser.compute("???#??#####????.#? 13,2"));
        assertEquals(19, parser.compute("..??#???#??.??? 3,3,1"));
        assertEquals(2, parser.compute(".?#????#????????#?# 1,1,1,1,1,6"));
        assertEquals(21, parser.compute("??????????. 1,3"));
        assertEquals(15, parser.compute(".?##???.?.??????? 2,1,1,1,3"));
        assertEquals(1, parser.compute("??..#?#???# 2,1,5"));
        assertEquals(2, parser.compute("#????#?##???#? 1,10"));
        assertEquals(1, parser.compute("??#?#?#?.. 5,2"));
        assertEquals(9, parser.compute("??#?#?????...??? 1,1,3,1,1"));
        assertEquals(10, parser.compute("??????#????? 1,1,6"));
        assertEquals(58, parser.compute("?????.??????..? 2,1,1,1,1"));
        assertEquals(4, parser.compute("??#?.#..?#? 2,1,2"));
        assertEquals(1, parser.compute("??.?##?.??.#?. 4,2"));
        assertEquals(1, parser.compute(".?.??#.??#? 1,2,1"));
        assertEquals(1, parser.compute("#???###????##. 1,1,9"));
        assertEquals(5, parser.compute("??##.?????###?????.? 2,7"));
        assertEquals(8, parser.compute("??.?#??#???##?..?## 1,5,3,3"));
        assertEquals(2, parser.compute(".??#??.?#?????#?#??? 2,9"));
        assertEquals(3, parser.compute("??#????????? 1,4,2,1"));
        assertEquals(7, parser.compute(".?#??????#??? 2,6"));
        assertEquals(3, parser.compute("..?????##?.#? 3,3,2"));
        assertEquals(3, parser.compute("?????.?#?#??? 1,2,1,3"));
        assertEquals(3, parser.compute("??#????##.. 2,1,2"));
        assertEquals(12, parser.compute("?????.????#??. 2,5"));
        assertEquals(2, parser.compute("##??###???#.# 2,4,2,1"));
        assertEquals(3, parser.compute("????#?????????#??.?. 3,10"));
        assertEquals(4, parser.compute("#..????.???#?????# 1,4,1,1,2,1"));
        assertEquals(10, parser.compute("??..????#?????? 1,2,2,1,2"));
        assertEquals(8, parser.compute("..???????????#??#??. 1,3,3,1,2"));
        assertEquals(2, parser.compute("???##?????.??#?????. 2,7,1,3,1"));
        assertEquals(1, parser.compute("?#?#??.?????# 1,2,6"));
        assertEquals(17, parser.compute("???????#????? 1,3"));
        assertEquals(10, parser.compute(".???????.???##? 3,5"));
        assertEquals(3, parser.compute(".?#???#????#? 1,2,1,1"));
        assertEquals(17, parser.compute("?###???#.??????#?? 4,1,1,1,4"));
        assertEquals(1, parser.compute(".?#??..?#??.?? 4,1"));
        assertEquals(2, parser.compute("?????#?#???#???.??.# 1,6,3,2,1,1"));
        assertEquals(2, parser.compute(".?#??????.??. 4,1,1,1"));
        assertEquals(26, parser.compute("?????#?????????? 2,2,5"));
        assertEquals(3, parser.compute("?????.???. 5,1"));
        assertEquals(2, parser.compute("..#????#?##?##?. 1,8"));
        assertEquals(6, parser.compute("?????.?..??. 4,1"));
        assertEquals(14, parser.compute("????.????.?#??#?? 1,2,5,1"));
        assertEquals(12, parser.compute(".??.?.???... 1,1"));
        assertEquals(1, parser.compute("?#.??##?#? 1,2,1"));
        assertEquals(4, parser.compute("?????#?..??##? 3,4"));
        assertEquals(3, parser.compute(".?????##??..??##?? 9,4"));
        assertEquals(10, parser.compute(".??#??.??? 3,1"));
        assertEquals(7, parser.compute("?.??#?..??.? 1,1,1,1"));
        assertEquals(2, parser.compute("#?.#????##?.?. 2,2,4,1"));
        assertEquals(8, parser.compute("??#..??.??.??? 1,1"));
        assertEquals(1, parser.compute("?.??.???#?????#? 2,2,1,6"));
        assertEquals(1, parser.compute("??#.?.??.? 1,2"));
        assertEquals(7, parser.compute("?????...?? 3,1"));
        assertEquals(8, parser.compute("??###????.?????? 8,3"));
        assertEquals(10, parser.compute("?????????????. 4,5"));
        assertEquals(2, parser.compute("??.????.#??.#??. 1,2,1,2,2"));
        assertEquals(12, parser.compute("??????#??#???#?#?. 1,1,5,5"));
        assertEquals(3, parser.compute("?##?#?????.?.#?.## 7,1,1,1,2"));
        assertEquals(18, parser.compute("???????#??.#.????.?? 1,7,1,1,1,1"));
        assertEquals(6, parser.compute("?????.?#?##?. 1,1,1,3"));
        assertEquals(19, parser.compute("??????.??? 1,2,1"));
        assertEquals(4, parser.compute("#??????#????? 3,1,2,3"));
        assertEquals(8, parser.compute(".??#??##??.??.?? 8,1"));
        assertEquals(1, parser.compute(".#???.??.? 2,2"));
        assertEquals(5, parser.compute("?#.#??#??##???????? 2,1,7,1,1,1"));
        assertEquals(15, parser.compute("?.??#??#??????? 1,1,3,2"));
        assertEquals(3, parser.compute("?.??????.? 2,2"));
        assertEquals(2, parser.compute("?.#.??.???#?????#??# 1,1,1,12"));
        assertEquals(26, parser.compute("?????.?#?????????.?. 1,2,1,4,1,1"));
        assertEquals(6, parser.compute("?????####???#???. 3,4,4"));
        assertEquals(3, parser.compute("????.?.??? 2,3"));
        assertEquals(4, parser.compute("#??????#?#???. 1,8"));
        assertEquals(3, parser.compute("?????#???.?## 7,2"));
        assertEquals(4, parser.compute("???.?.??#?# 1,1,4"));
        assertEquals(4, parser.compute("??????????????#???# 1,1,8,1,3"));
        assertEquals(8, parser.compute("??.??.?.??#?#?#??#? 1,1,1,10"));
        assertEquals(3, parser.compute("?##??###?#?.?..???? 3,6,1,4"));
        assertEquals(10, parser.compute("????.?.????##?? 1,7"));
        assertEquals(27, parser.compute("??.???????????.??? 1,1,1,5,1,1"));
        assertEquals(1, parser.compute("#??#?#?..#??#?#?#??? 1,1,1,9,1"));
        assertEquals(7, parser.compute("???.????.#?.??? 2,2"));
        assertEquals(1, parser.compute("???#.??##?? 2,2"));
        assertEquals(8, parser.compute("?#?.??????.???#??##? 1,1,2,1,7"));
        assertEquals(6, parser.compute("???.#.?#??#??##. 1,1,2,1,3"));
        assertEquals(6, parser.compute("????????#??. 2,6"));
        assertEquals(3, parser.compute("??#???#??##????.?# 9,1,2"));
        assertEquals(1, parser.compute("??????###?#.??.?#??# 1,9,1,1"));
        assertEquals(2, parser.compute("?.????.?#?? 4,2"));
        assertEquals(7, parser.compute("??????##??? 1,5,1"));
        assertEquals(2, parser.compute("#?#?##??##?????#?? 12,4"));
        assertEquals(1, parser.compute("##?.??#?#? 2,3"));
        assertEquals(3, parser.compute(".??#?##??? 6,1"));
        assertEquals(2, parser.compute("?????#??###?#?.??.?# 12,2,1"));
        assertEquals(2, parser.compute(".#???????.#?????.??. 8,2,3,1"));
        assertEquals(56, parser.compute("??????????.# 1,1,1,1"));
        assertEquals(4, parser.compute("?????####?.???#??? 10,1,2"));
        assertEquals(8, parser.compute("?.??.????????. 2,4"));
        assertEquals(3, parser.compute("?????#..???#?? 5,1,2"));
        assertEquals(9, parser.compute("?.??..???#???##?? 1,7"));
        assertEquals(6, parser.compute("????..?#???#? 2,1,3"));
        assertEquals(2, parser.compute("?#?#?#?.?#. 6,1"));
        assertEquals(1, parser.compute("?#.?#..#??##???. 1,2,6"));
        assertEquals(2, parser.compute(".?#????#.? 2,1"));
        assertEquals(8, parser.compute(".???#?..?.??? 4,1,1"));
        assertEquals(4, parser.compute("??#?.?#?#????#? 2,6,1"));
        assertEquals(2, parser.compute("#?????#?????####??.? 2,14"));
        assertEquals(1, parser.compute("???##?..?#.? 6,2"));
        assertEquals(5, parser.compute("??#?????#?#? 2,1,1,1"));
        assertEquals(1, parser.compute("?.????.#??#?. 4,1,1"));
        assertEquals(12, parser.compute("?#??.?#?#?#????.??? 3,9,1"));
        assertEquals(4, parser.compute("??????##?????.?. 11,1"));
        assertEquals(7, parser.compute("??.?.???#?. 1,3"));
        assertEquals(2, parser.compute("???#?.?#?##? 4,6"));
        assertEquals(2, parser.compute("?????#???#.##??# 4,2,5"));
        assertEquals(2, parser.compute("?.##???????#???#? 3,6"));
        assertEquals(18, parser.compute("??#???.#????? 2,1,1,1"));
        assertEquals(24, parser.compute("?#???????.?? 1,1,1,1"));
        assertEquals(4, parser.compute("?????.#.#? 2,1,2"));
        assertEquals(2, parser.compute("#?#??##????#??#. 1,7,2,1"));
        assertEquals(5, parser.compute("#???????.??.?.??.? 8,2,1,1"));
        assertEquals(4, parser.compute("???.?#??????#?#??#? 2,7"));
        assertEquals(15, parser.compute("????###???##???.. 1,4,3,1"));
        assertEquals(7, parser.compute(".??????..?. 1,2,1"));
        assertEquals(26, parser.compute("??.??.??????##?#???? 1,10"));
        assertEquals(15, parser.compute("????????#????? 3,5"));
        assertEquals(3, parser.compute("#????#??????#??? 4,4,1,1"));
        assertEquals(1, parser.compute(".?..#?#?...???? 1,1,2,4"));
        assertEquals(6, parser.compute("?#???.????.?# 3,2,1"));
        assertEquals(1, parser.compute("?..#?##???# 4,3"));
        assertEquals(2, parser.compute("##?.#???#?#?#.??? 2,9,2"));
        assertEquals(21, parser.compute("???.??????????# 2,4,1,1"));
        assertEquals(21, parser.compute(".???.???????? 1,4"));
        assertEquals(3, parser.compute("?.???#???#?? 3,4"));
        assertEquals(3, parser.compute(".??#??..??? 5,1"));
        assertEquals(2, parser.compute("??#?#?#???#? 5,2"));
        assertEquals(9, parser.compute("??????.?????#??# 1,3,2,1,1"));
        assertEquals(45, parser.compute(".??#??#?.??.???????? 1,5,1,1,1,1"));
        assertEquals(1, parser.compute(".???????#?## 1,1,1,5"));
        assertEquals(10, parser.compute(".????????? 4,1"));
        assertEquals(1, parser.compute("?..#?.?##?.??? 1,4"));
        assertEquals(39, parser.compute("??????????##?????#? 1,4,3,2"));
        assertEquals(2, parser.compute("?.#?#????????#?????? 1,8,1,4,1"));
        assertEquals(4, parser.compute("..?#??.??? 3,2"));
        assertEquals(2, parser.compute("##.#??#?#? 2,1,4"));
        assertEquals(4, parser.compute("???.#??#???#.#? 2,1,2,1,1"));
        assertEquals(5, parser.compute("???????#.?# 1,2,1"));
        assertEquals(6, parser.compute("..??????#???? 2,6"));
        assertEquals(6, parser.compute("?????#?##??.##?. 1,7,2"));
        assertEquals(3, parser.compute("?#??#????#??? 5,6"));
        assertEquals(2, parser.compute("??..#?????.?? 1,5"));
        assertEquals(10, parser.compute(".??.?.????????#??? 1,1,4,1,2,1"));
        assertEquals(13, parser.compute("?.??????.?.??? 2,2"));
        assertEquals(2, parser.compute("???#?.#.??? 2,1"));
        assertEquals(7, parser.compute(".???#??.??#???.????? 1,1,1,1,2,5"));
        assertEquals(3, parser.compute("?#.???????????#???# 1,5,2,6"));
        assertEquals(6, parser.compute("#???##.???#???.?#? 1,3,5,2"));
        assertEquals(4, parser.compute("#?..#.??#????#??? 2,1,1,3,1"));
        assertEquals(3, parser.compute("???..?#..?. 1,2,1"));
        assertEquals(3, parser.compute("?##???.???##???#?? 6,9"));
        assertEquals(35, parser.compute("??????????#? 1,1,1,1"));
        assertEquals(1, parser.compute("?##??##?#..?#?#? 9,5"));
        assertEquals(3, parser.compute("#..??????? 1,5"));
        assertEquals(7, parser.compute(".?????##???#? 1,7"));
        assertEquals(2, parser.compute("##?#????#.#???#?.# 9,1,2,1"));
        assertEquals(4, parser.compute("?????#.???. 3,1,2"));
        assertEquals(4, parser.compute("?#?????#?##??.#???. 4,2,2,1,1,1"));
        assertEquals(18, parser.compute("???#?#??#??????????. 11,2"));
        assertEquals(3, parser.compute("?.?.?????##??... 3,3"));
        assertEquals(2, parser.compute(".?.#?#?????#? 1,5,1"));
        assertEquals(52, parser.compute("?????????#???.?? 1,1,4"));
        assertEquals(2, parser.compute("?#??#?.##? 2,1,2"));
        assertEquals(4, parser.compute(".????.#??#?. 1,5"));
        assertEquals(1, parser.compute("?#?#??..????? 1,1,3,1"));
        assertEquals(8, parser.compute("?#?##??#.?.??? 5,1,1"));
        assertEquals(37, parser.compute("??##??.?#?????????#? 4,1,2,1,1,1"));
        assertEquals(2, parser.compute("?#?#?#???# 6,1"));
        assertEquals(46, parser.compute("???.??????????? 1,2,2,1,1"));
        assertEquals(6, parser.compute("###???.#?.??? 3,1,2,1"));
        assertEquals(8, parser.compute(".??.??.??#??.? 1,1,4,1"));
        assertEquals(4, parser.compute("??.??..#?.?. 1,1,2,1"));
        assertEquals(1, parser.compute("#?..??.??#??.? 2,2,5"));
        assertEquals(1, parser.compute("?#?#???.#?#??. 3,5"));
        assertEquals(5, parser.compute("?.#..?#???#????????# 1,7,3,1"));
        assertEquals(1, parser.compute("..??.?#???? 2,2,3"));
        assertEquals(1, parser.compute(".?..#?#??? 1,6"));
        assertEquals(1, parser.compute("##??#?.?#???.? 5,1,2,1"));
        assertEquals(4, parser.compute("??.?.?#.???#?#?. 1,1,2,5"));
        assertEquals(12, parser.compute(".?..???.?? 1,1"));
        assertEquals(1, parser.compute("???###?##???#?##?? 4,4,1,4"));
        assertEquals(3, parser.compute("?????#?.????###.? 1,1,1,7,1"));
        assertEquals(1, parser.compute("?#.??#?.????##.#.# 1,1,1,6,1,1"));
        assertEquals(3, parser.compute("???#?#????.?.?.???#. 5,2,1,1,3"));
        assertEquals(3, parser.compute(".????#?###??#? 1,1,4,1"));
        assertEquals(2, parser.compute("???#.??#?? 2,2"));
        assertEquals(1, parser.compute("?????#?.?#?.. 1,5,3"));
        assertEquals(16, parser.compute("?##????????. 3,2,1"));
        assertEquals(10, parser.compute("?????..?##??????. 1,5"));
        assertEquals(1, parser.compute("?.?#..???#?# 2,3"));
        assertEquals(1, parser.compute("????...???.##.#???? 1,2,1,1,2,3"));
        assertEquals(21, parser.compute(".????????.?? 1,1,1,2"));
        assertEquals(1, parser.compute("???#?#?#?#. 4,3"));
        assertEquals(1, parser.compute("?#??.#.???#?#??.? 1,1,1,8,1"));
        assertEquals(5, parser.compute("?.??????.#?. 2,1"));
        assertEquals(6, parser.compute(".??..?##???? 1,3,2"));
        assertEquals(2, parser.compute(".??#???##?## 2,5"));
        assertEquals(3, parser.compute("??????.#?. 4,1"));
        assertEquals(4, parser.compute("#.????#???#??????#?# 1,1,1,1,1,7"));
        assertEquals(4, parser.compute("???##?..???#?#?. 5,4"));
        assertEquals(4, parser.compute("..#??.?..??????#??? 1,5"));
        assertEquals(14, parser.compute("?#?.???#???? 2,1,1,1"));
        assertEquals(22, parser.compute(".?????#?.???? 1,1,1"));
        assertEquals(14, parser.compute("?.???????. 1,1,2"));
        assertEquals(4, parser.compute("#?????..?? 3,1,1"));
        assertEquals(2, parser.compute("#?#?#??#??#?#???#?#? 1,6,10"));
        assertEquals(6, parser.compute("..?####?##?????..??# 9,1,1,1"));
        assertEquals(21, parser.compute("?#??????????#??????? 4,1,1,3,3,1"));
        assertEquals(6, parser.compute("?????.??#? 2,1,3"));
        assertEquals(2, parser.compute("??#???##.?#??? 8,4"));
        assertEquals(12, parser.compute("?#?.?????. 2,1,1"));
        assertEquals(5, parser.compute("??.????##??#? 1,8"));
        assertEquals(59, parser.compute("#.????.??????.? 1,2,1,1,1"));
        assertEquals(1, parser.compute("?#?#??#.???#?###.? 3,1,6"));
        assertEquals(41, parser.compute("????????#??.????? 1,7,1,1"));
        assertEquals(20, parser.compute("??????????????? 4,5,1"));
        assertEquals(1, parser.compute("?##.?#???#?#?..?. 2,9,1"));
        assertEquals(4, parser.compute("????.??????#.???#. 3,5,1,1,1"));
        assertEquals(4, parser.compute("?#?.???..?? 2,3,1"));
        assertEquals(6, parser.compute("??#..??.??.??#???? 3,1,2,5"));
        assertEquals(6, parser.compute("?#?.????.?#? 3,1,1,2"));
        assertEquals(22, parser.compute("??????????#??? 1,6"));
        assertEquals(11, parser.compute("???????.?#.? 3,1,1"));
        assertEquals(6, parser.compute("????????##?. 2,2"));
        assertEquals(1, parser.compute("##???#??.. 4,2"));
        assertEquals(4, parser.compute(".?#????#?.?...? 4,1,1"));
        assertEquals(4, parser.compute("#???.?#?????????#??? 4,2,4,1,1,2"));
        assertEquals(1, parser.compute("#??.????#??#?.# 1,3,2,2,1"));
        assertEquals(12, parser.compute("?.???????##?#??????? 5,6,1,1"));
        assertEquals(5, parser.compute("???.????.##?#???.? 2,5"));
        assertEquals(4, parser.compute("??#?#.??.?? 5,1"));
        assertEquals(11, parser.compute("??.??????##.#?# 1,1,3,3"));
        assertEquals(7, parser.compute("?.??????#.??##?#? 1,4,1,5"));
        assertEquals(24, parser.compute("??????#???.??????. 4,2"));
        assertEquals(6, parser.compute("????##?.??#??. 5,3"));
        assertEquals(7, parser.compute("##???????.??.#? 5,1,1,2"));
        assertEquals(14, parser.compute("?..?????.??#??? 1,1,1,5"));
        assertEquals(7, parser.compute("??????####???#????? 12,2"));
        assertEquals(13, parser.compute("????.???.??? 1,1,1,3"));
        assertEquals(3, parser.compute("#?#???????#?##?? 4,9"));
        assertEquals(30, parser.compute("???..?.????? 1,1"));
        assertEquals(5, parser.compute("#??.??#??????.? 2,1,4,1"));
        assertEquals(4, parser.compute("#???#?##?##???????. 1,5,2,1,1,1"));
        assertEquals(15, parser.compute("??????#?##?????? 1,8,1,1"));
        assertEquals(4, parser.compute("?????.???#.?? 3,2"));
        assertEquals(4, parser.compute("???#??##??#?? 1,1,7"));
        assertEquals(5, parser.compute(".?#??#???.?. 5,1"));
        assertEquals(16, parser.compute("????#?##??#?#???.??? 10,1,1"));
        assertEquals(4, parser.compute("?????.#??? 2,3"));
        assertEquals(1, parser.compute("#?#?#????## 1,3,3"));
        assertEquals(2, parser.compute("??..??#??. 1,3,1"));
        assertEquals(8, parser.compute("??#?.??#..?.?? 3,1,1"));
        assertEquals(13, parser.compute("??????.?.???. 2,2"));
        assertEquals(20, parser.compute(".?????????... 1,1,2"));
        assertEquals(30, parser.compute("?.?.???????? 1,1,3"));
        assertEquals(3, parser.compute("??????#?.??##.??? 5,2,3"));
        assertEquals(4, parser.compute("?##?#???.?????#? 4,1,6"));
        assertEquals(2, parser.compute("?#???..??.??#? 3,1,2,2"));
        assertEquals(12, parser.compute("??#?????.??? 5,1"));
        assertEquals(13, parser.compute("????#?#?????? 5,1"));
        assertEquals(12, parser.compute("??????##?.??? 2,2,1"));
        assertEquals(1, parser.compute("???#??#??? 5,3"));
        assertEquals(2, parser.compute("..?.?????.??#?#???#. 1,4,1,5,1"));
        assertEquals(4, parser.compute("?.##???????.?? 6,1"));
        assertEquals(10, parser.compute("..???.????#???#???? 2,7"));
        assertEquals(1, parser.compute("????#.?#.. 4,1"));
        assertEquals(3, parser.compute("?.?.#??##????????? 1,1,5,3,3"));
        assertEquals(1, parser.compute("?.??#?#???#...?#?## 1,8,4"));
        assertEquals(3, parser.compute(".???#??..#??????? 1,3,3,4"));
        assertEquals(1, parser.compute("?#???.#?#???.?#.??# 5,1,2,2,2"));
        assertEquals(1, parser.compute("??#??#.?#???#??.? 2,2,1,5"));
        assertEquals(9, parser.compute("?.????#?.???? 3,1"));
        assertEquals(5, parser.compute("?.#?????#????#??? 1,2,3,1,4"));
        assertEquals(5, parser.compute(".????#..?#????.#?# 1,1,1,3,1,1"));
        assertEquals(4, parser.compute("#??????.?? 4,1,1"));
        assertEquals(6, parser.compute(".?.?#?#??.?.?? 5,1"));
        assertEquals(2, parser.compute(".#??#?????#?..??? 1,5,1,1,1"));
        assertEquals(3, parser.compute(".??#?.?..? 1,1,1"));
        assertEquals(2, parser.compute("#?##.??????##?. 1,2,7"));
        assertEquals(6, parser.compute(".#??##???.????? 1,3,2,1,1"));
        assertEquals(3, parser.compute("?#.?#..??.? 1,2,1"));
        assertEquals(2, parser.compute("?#???...?# 4,1"));
        assertEquals(3, parser.compute("####???#?????#???? 6,1,1,6"));
        assertEquals(2, parser.compute("???#?#?#?????#.?. 1,3,2,3,1"));
        assertEquals(3, parser.compute("??????.??????? 6,1,4"));
        assertEquals(28, parser.compute("?????????????? 6,1"));
        assertEquals(12, parser.compute("???????#??? 1,2"));
        assertEquals(2, parser.compute(".?##???..#?? 5,2"));
        assertEquals(20, parser.compute("????.#..???????? 3,1,2,1,1"));
        assertEquals(52, parser.compute("?????.??#??.???.?? 2,1,3,2,1"));
        assertEquals(11, parser.compute("##???.#???.????? 5,2,1,1"));
        assertEquals(81, parser.compute(".#.????????##?????? 1,1,1,4,1,1"));
        assertEquals(1, parser.compute("#??###?#??#?# 8,1,1"));
        assertEquals(12, parser.compute("??###??.#????.?? 4,1,2,1"));
        assertEquals(13, parser.compute("?.?????.?? 1,2"));
        assertEquals(5, parser.compute("????##..?#???????.? 5,2,4"));
        assertEquals(4, parser.compute("??????#????#??? 7,4,1"));
        assertEquals(6, parser.compute("??.#.???????#. 1,1,3"));
        assertEquals(1, parser.compute("?.?#????#??#?. 7,3"));
        assertEquals(4, parser.compute("?.??###?????##? 1,6,1,3"));
        assertEquals(4, parser.compute("????#???#????.?????? 9,3,3"));
        assertEquals(16, parser.compute("??#?#???????. 4,1,1"));
        assertEquals(2, parser.compute("?.#??????? 5,1"));
        assertEquals(3, parser.compute(".??#??????#??.????? 3,8,1,2"));
        assertEquals(2, parser.compute("##?##?????.?? 5,2,1,1"));
        assertEquals(2, parser.compute("?..#.?#???? 1,5"));
        assertEquals(36, parser.compute("????#???.??#?#?????? 2,4,5,1"));
        assertEquals(61, parser.compute("????#???????????? 2,3,2"));
        assertEquals(13, parser.compute("??.??????.?? 1,3,2"));
        assertEquals(24, parser.compute("??.??????? 1,1,2"));
        assertEquals(6, parser.compute("???.#?#???.???#?. 1,6,1,1"));
        assertEquals(2, parser.compute("?##?????.??.?. 8,1,1"));
        assertEquals(2, parser.compute(".#???##??..? 1,5,1"));
        assertEquals(4, parser.compute(".????#????? 3,3"));
        assertEquals(1, parser.compute("??..??????#?#?#?# 2,1,11"));
        assertEquals(1, parser.compute("??###??#???# 6,2"));
        assertEquals(3, parser.compute("?????#??#?? 4,2"));
        assertEquals(13, parser.compute("#???????????????.??? 6,6,1,1"));
        assertEquals(3, parser.compute("???#??##??. 1,7"));
        assertEquals(3, parser.compute("?.?#????#??? 1,1,1,3"));
        assertEquals(1, parser.compute("?.##?##?.####.? 5,4"));
        assertEquals(4, parser.compute("#.?#???.??#? 1,3,3"));
        assertEquals(4, parser.compute("?#?#??#?##..??????? 10,1,2,1"));
        assertEquals(4, parser.compute("??.???#??? 1,6"));
        assertEquals(2, parser.compute(".?###???##?.?#? 8,2"));
        assertEquals(1, parser.compute("?.???#??????.??#??# 4,5,6"));
        assertEquals(2, parser.compute("????##?.##???#??## 6,2,6"));
        assertEquals(2, parser.compute("##??.?.???###?? 2,7"));
        assertEquals(6, parser.compute("?..?.??#??#.??????? 1,1,3,1,3,2"));
        assertEquals(3, parser.compute("????#.??.? 5,1"));
        assertEquals(2, parser.compute("?#??.????#??###? 1,9"));
        assertEquals(4, parser.compute("??#?????#?????#? 1,2,1,1,5"));
        assertEquals(3, parser.compute("###?.???.?#? 3,1,1"));
        assertEquals(10, parser.compute("??????###??????????? 2,13"));
        assertEquals(12, parser.compute("??????????#?..? 1,6,1"));
        assertEquals(2, parser.compute("??#?#?.???#. 4,4"));
        assertEquals(7, parser.compute("??????###???.#??? 2,4,3"));
        assertEquals(64, parser.compute("?#?????????#??????? 3,3,4,1"));
        assertEquals(4, parser.compute("??.#???#???#.???? 1,3,5,3"));
        assertEquals(2, parser.compute("??..#????##? 2,1,1,2"));
        assertEquals(6, parser.compute("#..????????????#?. 1,5,3,1"));
        assertEquals(3, parser.compute("?#.?#??.??? 2,4,1"));
        assertEquals(2, parser.compute("??#????#??###??#?#. 1,1,1,11"));
        assertEquals(24, parser.compute("????.#.????.??#?? 1,1,1,1,5"));
        assertEquals(11, parser.compute("???.??#???#?????? 2,7"));
        assertEquals(1, parser.compute("??##?#?#??.?.#.?.? 1,7,1,1,1,1"));
        assertEquals(8, parser.compute("??.##..?.??? 1,2,1,1"));
        assertEquals(4, parser.compute("??????#????.###.?.? 1,1,6,3,1,1"));
        assertEquals(2, parser.compute("#?????#????#?? 7,1,1,1"));
        assertEquals(4, parser.compute("?#?????..??? 1,3,2"));
        assertEquals(4, parser.compute("??.#?###.???#????? 5,4"));
        assertEquals(2, parser.compute("#?.??..##.?..#?#?#? 1,1,2,1,6"));
        assertEquals(4, parser.compute("?.?#..#.???#??.?#?#? 1,1,1,5,4"));
        assertEquals(20, parser.compute(".??????#??????.#? 1,5,2,1"));
        assertEquals(3, parser.compute("??##.???????.#???#?? 4,1,4,2,1"));
        assertEquals(3, parser.compute("????.?????????? 2,1,6,2"));
        assertEquals(5, parser.compute("#?????.#??.? 1,1,2,1"));
        assertEquals(8, parser.compute("???#?.????##?##??? 3,8"));
        assertEquals(7, parser.compute("????.#?????????#?? 2,1,1,2,4,1"));
        assertEquals(6, parser.compute("??????????# 1,1,5"));
        assertEquals(2, parser.compute("????##?????..?..?? 1,1,5,1,1,1"));
        assertEquals(1, parser.compute("?#?#??#?#? 1,7"));
        assertEquals(2, parser.compute("??.#????#?????.#.??? 2,2,7,1"));
        assertEquals(1, parser.compute(".?.?#????.? 4,1,1"));
        assertEquals(10, parser.compute(".?????#??? 1,4"));
        assertEquals(10, parser.compute("?#.??.????#?.?? 1,1,4,1"));
        assertEquals(10, parser.compute("?????#????#???? 5,4"));
        assertEquals(1, parser.compute(".??#?#??.?. 3,3"));
        assertEquals(9, parser.compute("??#??##????.?? 8,1"));
        assertEquals(4, parser.compute("????#.?.????#?????.# 5,5,1,1,1"));
        assertEquals(1, parser.compute("?..?##?##?###.#? 9,1"));
        assertEquals(10, parser.compute("???#?#??.???????? 1,6,3,1"));
        assertEquals(7, parser.compute("?????#?????#.?#. 2,2,2,1,2"));
        assertEquals(2, parser.compute("????#??#.?? 6,1,1"));
        assertEquals(14, parser.compute("?.?#????#.????? 1,1,1,2,1"));
        assertEquals(1, parser.compute("?????##..???## 1,5,5"));
        assertEquals(1, parser.compute("#?????###.#?#.????#? 1,6,1,1,1,4"));
        assertEquals(5, parser.compute("????.??.?#.#? 1,2,1,1"));
        assertEquals(3, parser.compute("??.#????????.?#??? 2,4,2,2,2"));
        assertEquals(12, parser.compute("??..#?????##?#???? 1,2,5,2"));
        assertEquals(4, parser.compute(".??...#??? 1,1,1"));
        assertEquals(12, parser.compute(".???#?.???.? 1,2,1,1"));
        assertEquals(8, parser.compute("???#???????##??#?#? 6,8"));
        assertEquals(1, parser.compute("??#.?.????#?# 1,1,1,6"));
        assertEquals(2, parser.compute("?????#?#?# 3,3,1"));
        assertEquals(19, parser.compute("?#?????.???.?? 5,1,1"));
        assertEquals(12, parser.compute("?#?????#?.??#??.?.? 4,2,3"));
        assertEquals(1, parser.compute("#??????#??.??..#?? 2,4,1,2,1,1"));
        assertEquals(5, parser.compute("????.#??.?. 1,2,1"));
        assertEquals(26, parser.compute("?.???#???#???????? 1,4,1,1,2,1"));
        assertEquals(2, parser.compute("???.??#?.?? 3,2,2"));
        assertEquals(2, parser.compute(".??#??#.?###?? 6,5"));
        assertEquals(3, parser.compute(".????..#???.#?#???.? 1,1,3,5"));
        assertEquals(6, parser.compute(".?#??.???#??.??#?? 1,2,3"));
        assertEquals(4, parser.compute("??.?#?###????### 1,7,3"));
        assertEquals(2, parser.compute(".???.##????#???.? 3,2"));
        assertEquals(2, parser.compute("#??###??.?##???.. 8,5"));
        assertEquals(2, parser.compute("..???#?##.? 1,4,1"));
        assertEquals(2, parser.compute("?.?##??.?#?#???###?? 4,12"));
        assertEquals(4, parser.compute("?.????#..??#? 1,1,2,3"));
        assertEquals(4, parser.compute(".#????#??#??????# 2,1,1,3,1"));
        assertEquals(4, parser.compute("?..?#?##?#???????#? 10,2"));
        assertEquals(3, parser.compute("??.###.????. 3,2"));
        assertEquals(4, parser.compute("???????#???????...?. 9,1,2,1"));
        assertEquals(3, parser.compute("?????..?#. 1,2,2"));
        assertEquals(4, parser.compute("?????#??#????? 6,3,2"));
        assertEquals(3, parser.compute("?.???#??#?. 1,4"));
        assertEquals(2, parser.compute("?.?#????#?. 1,3,1"));
        assertEquals(2, parser.compute("??.????#??#.#?## 1,8,4"));
        assertEquals(2, parser.compute("???...????..?#????.? 4,2"));
        assertEquals(1, parser.compute(".##?????#??#?##.?#. 11,2,2"));
        assertEquals(2, parser.compute("?..#?#.?#?. 1,3,2"));
        assertEquals(2, parser.compute("###???????##?.?. 3,5"));
        assertEquals(31, parser.compute("????????#?? 1,1,3"));
        assertEquals(1, parser.compute("?.???##???##. 6,3"));
        assertEquals(44, parser.compute("???????#???..#??.??? 1,1,5,1,1,1"));
        assertEquals(3, parser.compute("??.??##??#???.#???? 2,7,4"));
        assertEquals(3, parser.compute("??##??#???.? 7,1,1"));
        assertEquals(10, parser.compute("??????????? 6,1"));
        assertEquals(3, parser.compute("??#?#??.????#?#.??? 5,4"));
        assertEquals(6, parser.compute(".???..#??????#?.??? 2,8,1"));
        assertEquals(1, parser.compute(".?#.??#?..?.?.# 2,4,1,1,1"));
        assertEquals(5, parser.compute("?.??.?#.???##?.??? 1,2,1,4,3"));
        assertEquals(6, parser.compute("???#?.??###????..? 2,6"));
        assertEquals(6, parser.compute("????????.##? 1,4,2"));
        assertEquals(6, parser.compute(".??.???????##? 1,1,7"));
        assertEquals(7, parser.compute(".??????#??#?????# 6,2,1,1"));
        assertEquals(94, parser.compute("???#??????#???.???? 4,1,1,1,2"));
        assertEquals(4, parser.compute("??.??.???#?#??#?#?#? 1,1,1,7,3"));
        assertEquals(2, parser.compute("????.?####.????##?? 3,5,1,1,2,1"));
        assertEquals(1, parser.compute("?????#?????????#? 6,3,1,1,1"));
        assertEquals(4, parser.compute("????.?.???#?#??? 3,8"));
        assertEquals(8, parser.compute("??????#?#?.?. 1,5,1"));
        assertEquals(17, parser.compute(".??.#?#???.???? 1,1,2,1,1"));
        assertEquals(9, parser.compute(".##???..#????.?.?? 2,2,1,1,1,1"));
        assertEquals(1, parser.compute(".#?##?.???? 4,2,1"));
        assertEquals(1, parser.compute("?##??##?#? 2,3,2"));
        assertEquals(3, parser.compute("??##???.#?#? 4,1,1,2"));
        assertEquals(33, parser.compute("???.?????????#.???? 3,2,1,1,3"));
        assertEquals(4, parser.compute("????#?..????. 2,1,3"));
        assertEquals(2, parser.compute(".???#?#?##??.??#.?. 7,1"));
        assertEquals(1, parser.compute(".#??#?.??. 4,2"));
        assertEquals(34, parser.compute("???.??????? 1,2,1"));
        assertEquals(16, parser.compute("?????????.???.#?? 3,1,3,2"));
        assertEquals(1, parser.compute("?#???#?#??#? 5,2,2"));
        assertEquals(3, parser.compute("???????.?# 5,2"));
        assertEquals(4, parser.compute("#????#??#????.# 1,1,4,2,1"));
        assertEquals(2, parser.compute(".??..?.?##???? 2,1,6"));
        assertEquals(11, parser.compute("...??.???? 1,1"));
        assertEquals(1, parser.compute("#?????#???##?. 1,5,5"));
        assertEquals(1, parser.compute("?#?.??#???#?? 1,5,2"));
        assertEquals(3, parser.compute("???#?????# 4,3"));
        assertEquals(9, parser.compute(".??.????#?? 1,4"));
        assertEquals(1, parser.compute("??????#.????# 4,2,4"));
        assertEquals(4, parser.compute("????????.#?.???..? 2,2,1,1,3,1"));
        assertEquals(14, parser.compute("???.????.? 2,1"));
        assertEquals(30, parser.compute("????#???????? 3,1,1,1"));
        assertEquals(3, parser.compute("?.#??#???#?????? 1,11"));
        assertEquals(1, parser.compute(".?#?#?##.?##.# 7,2,1"));
        assertEquals(3, parser.compute("#??????..??? 4,2,1"));
        assertEquals(2, parser.compute("?.??#??????###?.?### 1,10,4"));
        assertEquals(2, parser.compute("???#??.??##?? 2,2"));
        assertEquals(1, parser.compute("?#??#.#?#???? 1,2,5"));
        assertEquals(1, parser.compute("????#....#?#?#?#?#.? 4,9"));
        assertEquals(20, parser.compute("#?????????????.? 1,2,1,4"));
        assertEquals(18, parser.compute("??.?????#?. 1,1,2"));
        assertEquals(7, parser.compute("??.????.?? 1,2,2"));
        assertEquals(7, parser.compute("????#???#????. 1,7"));
        assertEquals(4, parser.compute("???.??.#???##.??.#? 3,1,2,3,1,1"));
        assertEquals(4, parser.compute(".#???????#.??. 1,1,4,1"));
        assertEquals(8, parser.compute(".?.?.??####????.# 1,1,6,1,1"));
        assertEquals(1, parser.compute(".#??#?##??#??#?.# 11,1,1"));
        assertEquals(2, parser.compute("??.#?#??.? 1,1,2"));
        assertEquals(1, parser.compute("#????#??????.? 11,1"));
        assertEquals(4, parser.compute("?#??#?????.?? 1,1,3,1"));
        assertEquals(2, parser.compute("??#?##????.#.? 1,5,1"));
        assertEquals(6, parser.compute("##.?###???????????.? 2,10,2,1"));
        assertEquals(7, parser.compute("????#######????.?... 12,1"));
        assertEquals(3, parser.compute("???.??...? 1,2,1"));
        assertEquals(6, parser.compute("?#??##?.???? 6,2"));
        assertEquals(5, parser.compute(".????????????.# 4,1,1,2,1"));
        assertEquals(3, parser.compute("??###????? 3,2"));
        assertEquals(3, parser.compute(".??#.?#???? 1,2,2"));
        assertEquals(1, parser.compute("?##..#??.? 2,2"));
        assertEquals(3, parser.compute(".??#.?.??#???#?.?? 3,1,6"));
        assertEquals(1, parser.compute("???###????.?#?? 10,1"));
        assertEquals(4, parser.compute("#..???#????#?.???.? 1,9,2"));
        assertEquals(2, parser.compute("#.??#.??#???#..? 1,1,1,5"));
        assertEquals(3, parser.compute(".?.??????#??.## 1,2,5,2"));
        assertEquals(6, parser.compute("????????.??#. 2,3,3"));
        assertEquals(2, parser.compute("?#???#??#??#?? 4,2,1,2"));
        assertEquals(3, parser.compute("??????.?????????? 6,8"));
        assertEquals(6, parser.compute("????.??#?#..????##? 2,3,4"));
        assertEquals(6, parser.compute(".?#?#??.??????#??.?? 3,4,3,1"));
        assertEquals(2, parser.compute("#???.???#??.?.? 1,2,5,1,1"));
        assertEquals(9, parser.compute("?#####?????#?? 6,1,3"));
        assertEquals(3, parser.compute("?#????##?? 2,6"));
        assertEquals(17, parser.compute("??????##???.????? 8,2"));
        assertEquals(1, parser.compute("#?????#### 1,7"));
        assertEquals(3, parser.compute("????##??#??? 3,2,2,1"));
        assertEquals(1, parser.compute("?.#??.#.##????? 1,2,1,7"));
        assertEquals(3, parser.compute("#?#??.??###?#?? 3,7"));
        assertEquals(7, parser.compute("????.?#?????#???.# 2,8,1"));
        assertEquals(11, parser.compute("?.#????????????? 1,5,2,1,1"));
        assertEquals(2, parser.compute(".?????.#???.??????## 1,1,1,1,1,7"));
        assertEquals(2, parser.compute("?????#.#.?????#? 3,1,4"));
        assertEquals(12, parser.compute("?#?#??#???.??????? 9,1,3"));
        assertEquals(5, parser.compute("#?.??????????????##? 2,1,1,2,9"));
        assertEquals(18, parser.compute("??.??###.???.?????.# 1,5,1,2,1,1"));
        assertEquals(3, parser.compute(".??#?????.#????#?#? 5,9"));
        assertEquals(17, parser.compute("?????.??.? 2,1,1"));
        assertEquals(1, parser.compute("#???#?#??????#??#. 3,13"));
        assertEquals(1, parser.compute("?#???????#??. 6,5"));
        assertEquals(4, parser.compute("?.?#?.?????.?.?.. 1,2,5,1"));
        assertEquals(3, parser.compute("?#???#???.. 1,2,1"));
        assertEquals(1, parser.compute(".?#??#????? 5,2,1"));
        assertEquals(2, parser.compute("????.?..?? 3,2"));
        assertEquals(5, parser.compute("??###?????#?.#? 7,2,2"));
        assertEquals(3, parser.compute("#.???.?????????#? 1,1,8,2"));
        assertEquals(7, parser.compute("#??.?????????. 1,1,2,4"));
        assertEquals(5, parser.compute(".#????.??? 2,1"));
        assertEquals(28, parser.compute("?..?????.?????#?#??? 1,3,1,7"));
        assertEquals(2, parser.compute("#..??..??#.?? 1,1,3"));
        assertEquals(2, parser.compute("????#.?.#????##..?.? 5,1,2,3,1"));
        assertEquals(6, parser.compute("???###????? 6,2"));
        assertEquals(2, parser.compute("??..??#????.? 2,6"));
        assertEquals(3, parser.compute("????.##??????????#?# 1,1,9,1,1,1"));
        assertEquals(1, parser.compute("#.????.#?????#?# 1,1,2,3,4"));
        assertEquals(3, parser.compute("#.?????#?????.# 1,8,1,1"));
        assertEquals(1, parser.compute("?#?#??.?.#?#.?? 6,3"));
        assertEquals(1, parser.compute(".?.#.??.#.?#???##?? 1,2,1,1,6"));
        assertEquals(55, parser.compute(".?????????#????? 1,1,5"));
        assertEquals(16, parser.compute("??.??#??.??#..???.?? 1,4,3,2,1"));
        assertEquals(10, parser.compute("??.?.??.?? 1,1,2"));
        assertEquals(4, parser.compute(".?.???????..??. 6,1"));
        assertEquals(22, parser.compute(".?##?..????????.? 3,1,1,2,1"));
        assertEquals(91, parser.compute("???????????#?. 1,1,1,2"));
        assertEquals(2, parser.compute(".?..???#?#?####????# 1,1,1,11"));
        assertEquals(2, parser.compute("??#??#??????#. 1,6,2"));
        assertEquals(2, parser.compute("?.?????#?##?#? 1,4,5"));
        assertEquals(15, parser.compute("????#??.??????? 4,3"));
        assertEquals(4, parser.compute(".?.?.#??????##?????. 1,11"));
        assertEquals(5, parser.compute("?????????#??#???? 4,2"));
        assertEquals(6, parser.compute("??.??????#??#?? 2,4"));
        assertEquals(39, parser.compute("?????.????? 2,1,1"));
        assertEquals(3, parser.compute("?.??????#??#??#??##. 1,14"));
        assertEquals(4, parser.compute("?.??#.???????. 1,4"));
        assertEquals(24, parser.compute(".???..???.??? 2,1,1"));
        assertEquals(4, parser.compute("??#?##??.???.?. 7,2,1"));
        assertEquals(7, parser.compute("??.?#????? 1,2"));
        assertEquals(10, parser.compute("#???.#?#??.???????. 1,2,1,2,2,1"));
        assertEquals(2, parser.compute("#?#?.##?#??? 3,2,1,1"));
        assertEquals(9, parser.compute("??#???????????#..??? 3,2,5,3"));
        assertEquals(3, parser.compute("???.##??###?##? 1,2,8"));
        assertEquals(9, parser.compute("??#????#?#????? 3,8"));
        assertEquals(3, parser.compute("?#?????#??????#??? 7,6,1"));
        assertEquals(3, parser.compute("?##??????#??#??. 3,10"));
        assertEquals(2, parser.compute("?#?#?????##?. 7,2"));
        assertEquals(2, parser.compute("??..??.#?.????? 2,1,1,5"));
        assertEquals(12, parser.compute("?????#.?????.??.??. 4,1,2,1,1,1"));
        assertEquals(24, parser.compute("?????????.?.??# 1,4,1,1"));
        assertEquals(3, parser.compute("#????..#?#. 1,1,3"));
        assertEquals(3, parser.compute("???#???.??#???? 4,1,2,1,1"));
        assertEquals(1, parser.compute("??.?##.#??#? 2,2,1,1"));
        assertEquals(9, parser.compute(".?#??????????? 3,5,1"));
        assertEquals(5, parser.compute("?#..????????# 1,2,2"));
        assertEquals(10, parser.compute(".?#?.?#??????. 2,3,2"));
        assertEquals(2, parser.compute("??????#?#?#?..##??? 11,4"));
        assertEquals(1, parser.compute("????#????.?#???#??#. 5,1,1,7,1"));
        assertEquals(6, parser.compute("??????.#????#? 2,1,6"));
        assertEquals(40, parser.compute("?.??#???.??????##?? 1,2,1,1,1,3"));
        assertEquals(13, parser.compute("?#?#.??.????? 4,1,1,1"));
        assertEquals(7, parser.compute("????#????#???.? 9,1"));
        assertEquals(3, parser.compute("?..????????? 5,2"));
        assertEquals(10, parser.compute("????..?##????????? 3,3,6"));
        assertEquals(2, parser.compute("?????#.?##????.?.#?. 6,6,1"));
        assertEquals(2, parser.compute("?.?.###????????# 1,6,5"));
        assertEquals(10, parser.compute("????#?????##????. 4,1,5"));
        assertEquals(10, parser.compute("???????##?? 2,1,4"));
        assertEquals(3, parser.compute("?????#???#?. 1,8"));
        assertEquals(3, parser.compute(".#?#??#?.??? 3,1,1"));
        assertEquals(6, parser.compute("????#????###????#.# 2,1,1,6,1,1"));
        assertEquals(60, parser.compute("#??????#????.??? 1,1,3,1,1"));
        assertEquals(2, parser.compute("?#?#?#???#???.?.#?.? 11,2"));
        assertEquals(9, parser.compute("#???????#?#????? 1,1,6,1,1"));
        assertEquals(3, parser.compute("?.???##???###??? 1,1,9"));
        assertEquals(16, parser.compute("????.?????# 1,1,2"));
        assertEquals(24, parser.compute(".???.#?????? 1,1,1,1"));
        assertEquals(7, parser.compute("#??????#?#??.? 1,1,6,1"));
        assertEquals(22, parser.compute("????.?.?.?. 1,1,1"));
        assertEquals(4, parser.compute("?????.???..??????#. 5,3,1,2"));
        assertEquals(12, parser.compute("????????#?? 1,5"));
        assertEquals(9, parser.compute("..??#??????#??????? 11,2"));
        assertEquals(2, parser.compute("??.??????#?. 1,3,1,2"));
        assertEquals(4, parser.compute(".#????.??? 3,1"));
        assertEquals(3, parser.compute("????..??##. 2,4"));
        assertEquals(1, parser.compute(".??#?#????.??#. 9,3"));
        assertEquals(6, parser.compute("??#???.???.??#??#?? 5,1,8"));
        assertEquals(80, parser.compute("??????????.???????? 1,1,5,1,1,1"));
        assertEquals(7, parser.compute("??????##?.#?..??? 2,2,1"));
        assertEquals(2, parser.compute(".#??#?..?? 1,1,1"));
        assertEquals(5, parser.compute("??#???#?##?????##??# 2,6,6"));
        assertEquals(26, parser.compute("????.???.??. 2,1,1"));
        assertEquals(252, parser.compute("????????????????? 4,1,1,1,1"));
        assertEquals(3, parser.compute("???#??.?.#? 1,2,2"));
        assertEquals(1, parser.compute("#?????#?#?#?.?#?## 12,4"));
        assertEquals(2, parser.compute("????##?.??.?#?#.?. 4,4"));
        assertEquals(2, parser.compute(".??????#?#?###??? 1,10,2"));
        assertEquals(9, parser.compute(".???##????? 4,1"));
        assertEquals(1, parser.compute("?.#????###.? 8,1"));
        assertEquals(4, parser.compute("??.??#???????????? 2,1,5,2,1,1"));
        assertEquals(9, parser.compute("??.??#??.?????.. 2,3,3"));
        assertEquals(1, parser.compute("#?.#?#???##?? 1,10"));
        assertEquals(8, parser.compute("#???.??.?. 1,1,1"));
        assertEquals(3, parser.compute("#?#??...??????#? 5,1,2,1"));
        assertEquals(8, parser.compute("???.?.?##?.??#??.#? 1,1,4,1,1,1"));
        assertEquals(4, parser.compute("??..?.??#????#? 1,1,1,1,4"));
        assertEquals(11, parser.compute("?.?#?????.? 2,1,1"));
        assertEquals(1, parser.compute(".??#?.#??.?# 4,2,1"));
        assertEquals(3, parser.compute("??#?##?#?????# 9,1"));
        assertEquals(55, parser.compute("???#?????##?.?????#? 1,1,1,3,1,3"));
        assertEquals(9, parser.compute("???????#?????.. 2,1,1,2,1"));
        assertEquals(2, parser.compute("?#???#..#.?#? 2,1,1,1"));
        assertEquals(3, parser.compute("##???????##?????? 2,1,11"));
        assertEquals(8, parser.compute(".??.?.###?#.?????? 1,1,5,1,1,1"));
        assertEquals(3, parser.compute("???????.?.?#.?#? 4,1,1,1,3"));
        assertEquals(9, parser.compute("???.?????????#??? 1,7,3"));
        assertEquals(4, parser.compute("??#??#??#???.??????# 1,1,7,1,4"));
        assertEquals(2, parser.compute("??.?????.?.##.? 1,1,3,2"));
        assertEquals(1, parser.compute("?.#..###?..?? 1,4"));
        assertEquals(18, parser.compute("???..?#?????.??????. 3,1"));
        assertEquals(1, parser.compute("?##???????.. 5,4"));
        assertEquals(6, parser.compute(".??.??????.##?#? 2,4"));
        assertEquals(1, parser.compute("????????#??#? 10,1"));
        assertEquals(1, parser.compute(".???##???????#?????? 3,13"));
        assertEquals(2, parser.compute("??##????#?#?? 9,1"));
        assertEquals(1, parser.compute("##?#?.??????.? 2,2,1,4"));
        assertEquals(8, parser.compute("???.?????#?? 1,1"));
        assertEquals(15, parser.compute("?#?#.?????????????. 3,5,1,1,1"));
        assertEquals(2, parser.compute("#???#?.##?????.?? 1,1,1,7,1"));
        assertEquals(2, parser.compute("#?#??.??#.?? 5,1,1,1"));
        assertEquals(29, parser.compute("??#?????????##?. 3,1,2,3"));
        assertEquals(4, parser.compute("##????#?###??#???.?? 14,1"));
        assertEquals(1, parser.compute("?.#.???##?##?#? 1,3,2,2"));
        assertEquals(1, parser.compute("??????#.????# 4,2,3"));
        assertEquals(8, parser.compute("???#.???.??? 1,1,2,2"));
        assertEquals(1, parser.compute("???#????????#. 2,4,3,1"));
        assertEquals(2, parser.compute("##??????#??#?.??.??# 10,1,1,2"));
        assertEquals(4, parser.compute("?#?##.?????? 1,2,3"));
        assertEquals(191, parser.compute("?????????.????.??? 3,1,1,1,1,1"));
        assertEquals(3, parser.compute("#.?????#?? 1,1,5"));
        assertEquals(1, parser.compute("??#.?.??####??????# 2,10,2"));
        assertEquals(11, parser.compute("??#???????.#?? 2,1,2"));
        assertEquals(6, parser.compute("???#?.???.#??? 1,2,2,4"));
        assertEquals(2, parser.compute("?.?????####?#??#?#? 1,1,2,6,4"));
        assertEquals(1, parser.compute("####.??????#.?.#? 4,1,1,3,1"));
        assertEquals(10, parser.compute(".?#.?????? 2,1,1"));
        assertEquals(4, parser.compute("??.??.#.???#? 1,1,1,5"));
        assertEquals(4, parser.compute("?.?.??..#???##?. 1,6"));
        assertEquals(1, parser.compute("#??###?#??#?.?#..# 8,1,2,1"));
        assertEquals(6, parser.compute("??.??..??..##??#?.? 1,6"));
        assertEquals(2, parser.compute("?.#?#?????..?# 1,4,2"));
        assertEquals(8, parser.compute(".#???#?.???#????#? 1,2,1,2,4"));
        assertEquals(10, parser.compute("?.???#???.??????? 1,2,4,2,1"));
        assertEquals(6, parser.compute("??.??#.???? 1,1,3"));
        assertEquals(8, parser.compute("??#?.?.#??#??????.?# 3,1,1,1,3,2"));
        assertEquals(1, parser.compute("??#?.?.????###?. 4,1,8"));
        assertEquals(1, parser.compute("?.?#????#?.. 2,2,2"));
        assertEquals(4, parser.compute("?.?##???.??.???? 4,2,3"));
        assertEquals(4, parser.compute("?#?.?.#?.??#? 2,2,3"));
        assertEquals(3, parser.compute("#????.???#?#.. 2,1,4"));
        assertEquals(4, parser.compute("?.?.???#..??.#? 1,2,1,1,1"));
        assertEquals(2, parser.compute("????.#?.#??#?##??# 3,2,8,1"));
        assertEquals(12, parser.compute(".???.???#?????????? 2,7,4"));
        assertEquals(1, parser.compute("?#???#????????#..#?? 13,1,1"));
        assertEquals(2, parser.compute("???##??##. 1,2,3"));
        assertEquals(10, parser.compute("???????????. 5,1,1"));
        assertEquals(8, parser.compute("??..??.???#??# 1,1,5"));
        assertEquals(6, parser.compute("???????#??#??#? 2,2,1,5"));
        assertEquals(3, parser.compute("???#?????.# 6,1,1"));
        assertEquals(7, parser.compute("????###??.?.# 1,5,1,1"));
        assertEquals(1, parser.compute(".?.????????#?.#?#.## 1,10,1,1,2"));
        assertEquals(13, parser.compute("???.????#??#???#.? 1,8,1,1"));
        assertEquals(2, parser.compute("?#???.#????? 3,5"));
        assertEquals(3, parser.compute("#????#?##???#??? 4,4,1,1"));
        assertEquals(6, parser.compute("???????.???#??. 6,4"));
        assertEquals(11, parser.compute("?#??????.?..?.??...? 6,1"));
        assertEquals(6, parser.compute("??.??#?..#????? 1,4,1,1,1"));
        assertEquals(3, parser.compute("?.?##??#???#.??. 5,1,1"));
        assertEquals(2, parser.compute("#?.?#?????? 2,1,4"));
        assertEquals(4, parser.compute(".?#??.?#?? 3,2"));
        assertEquals(23, parser.compute("????????#???? 3,3,1"));
        assertEquals(4, parser.compute("?.#?#?#????? 5,1"));
        assertEquals(106, parser.compute("???????##??.??????? 1,1,4,1,2,1"));
        assertEquals(2, parser.compute("??#?..?#??? 1,4"));
        assertEquals(4, parser.compute("??#???#??#? 3,3,2"));
        assertEquals(18, parser.compute("?????.???.#?????.?? 1,1,1,1,6,1"));
        assertEquals(3, parser.compute("#????##????#?#??#?? 1,1,13"));
        assertEquals(40, parser.compute("??????.??? 1,1,1"));
        assertEquals(4, parser.compute("????#?????##?#?. 1,3,2,4"));
        assertEquals(11, parser.compute("?#??#?#?##???.#.???? 10,1,1"));
        assertEquals(2, parser.compute("???.?.?????? 3,1,5"));
        assertEquals(20, parser.compute("????????..?# 1,1,1,1"));
        assertEquals(2, parser.compute(".?#???.?#? 4,1"));
        assertEquals(3, parser.compute("???#?#??.#?.??. 4,2,2"));
        assertEquals(9, parser.compute(".??.???#?? 1,3"));
        assertEquals(1, parser.compute("?#..??#??? 1,1"));
        assertEquals(4, parser.compute("?.#?.#???##???.?? 1,1,1,6,1"));
        assertEquals(6, parser.compute("???????..?? 2,3,1"));
        assertEquals(3, parser.compute(".#???##??????? 2,6,2"));
        assertEquals(1, parser.compute("?##??..??#?? 2,1,5"));
        assertEquals(3, parser.compute("?.???????#?#?#..?# 4,5,1"));
        assertEquals(3, parser.compute("???#??.#?.?. 1,2,2"));
        assertEquals(17, parser.compute("??...?.???? 1,1,1"));
        assertEquals(1, parser.compute("???#?##?##.??#??. 10,3,1"));
        assertEquals(4, parser.compute("?..??????#. 2,1"));
        assertEquals(3, parser.compute("???..##????????#?? 1,11"));
        assertEquals(1, parser.compute("??#?###.## 5,2"));
        assertEquals(6, parser.compute("?????????#?#?##?? 3,11"));
        assertEquals(3, parser.compute("?#??????.?#.?#. 5,1,2,1"));
        assertEquals(6, parser.compute("???????.????##?#??#? 4,2,9"));
        assertEquals(1, parser.compute("?#?.??##?? 1,6"));
        assertEquals(3, parser.compute(".#??..??#?#??#???? 2,10"));
        assertEquals(4, parser.compute(".?.?????##?#??#??.? 2,3,1,3"));
        assertEquals(1, parser.compute("?#????#???##??#??? 13,2"));
        assertEquals(1, parser.compute("????##??##?##.?#? 6,6,1"));
        assertEquals(4, parser.compute(".????#?????.?.???. 8,1,3"));
        assertEquals(12, parser.compute("????#???#.?????#?? 7,1,3"));
        assertEquals(24, parser.compute("??????.??? 2,1,1"));
        assertEquals(1, parser.compute("?#????????.? 1,5,1,1"));
        assertEquals(3, parser.compute("?????##?.#.?. 1,5,1,1"));
        assertEquals(1, parser.compute("#?#??#????#?????. 1,7,1,4"));
        assertEquals(6, parser.compute("?###??????. 3,1,1"));
        assertEquals(8, parser.compute(".???##.??#???.?????# 5,1,1,1,3"));
        assertEquals(5, parser.compute("#?.#?.???????? 2,1,4"));
        assertEquals(3, parser.compute("?.?.??#?#?.??#??#??? 6,6"));
        assertEquals(13, parser.compute("?#?????.???#????? 1,2,1,6"));
        assertEquals(2, parser.compute("??????#?..?????#.. 2,4"));
        assertEquals(6, parser.compute("????.?#?????? 2,7"));
        assertEquals(1, parser.compute("?.##?#?.?..#? 1,5,2"));
        assertEquals(2, parser.compute("#??.??#?#?..??. 2,6,1"));
        assertEquals(5, parser.compute("?#??????.?# 2,3,2"));
        assertEquals(29, parser.compute("???????#.?.??? 3,1,1,1"));
        assertEquals(4, parser.compute("??##?##??#??.??##? 9,4"));
        assertEquals(12, parser.compute("???.?#??????? 1,2,1,3"));
        assertEquals(7, parser.compute("?#.??.???????##? 1,1,4,2"));
        assertEquals(5, parser.compute("????????????. 2,2,3,1"));
        assertEquals(12, parser.compute("????#?#####.????? 2,7,1,1"));
        assertEquals(2, parser.compute("#??##????.???.??# 9,2,1,1"));
        assertEquals(5, parser.compute("?.???#????##?.#?? 5,3,2"));
        assertEquals(1, parser.compute("#????#?????##??? 9,2"));
        assertEquals(10, parser.compute("?#?????.?#????..??? 2,2,5,3"));
        assertEquals(7, parser.compute("???#??#????.?? 1,7,1"));
        assertEquals(1, parser.compute("???#??##??#?. 6,3"));
        assertEquals(8, parser.compute("??#????..#??#?.?##? 1,1,1,5,3"));
        assertEquals(11, parser.compute("???????#?? 1,2"));
        assertEquals(3, parser.compute("?###???##??#.. 5,3,1"));
        assertEquals(18, parser.compute("??.?##??????? 1,4,1"));
        assertEquals(2, parser.compute("?#????#.?..??#?###?# 1,1,1,1,7,1"));
        assertEquals(4, parser.compute(".????.##?? 1,2,1"));
        assertEquals(6, parser.compute("##.?.???.??. 2,1,2"));
        assertEquals(2, parser.compute("#..?#???#. 1,2,2"));
        assertEquals(7, parser.compute("?#?????????????????? 2,1,1,2,7,1"));
        assertEquals(2, parser.compute("??#?.????. 2,1,2"));
        assertEquals(2, parser.compute(".??????..#?.?#???# 5,1,5"));
        assertEquals(1, parser.compute("#?#??.??.?#.?. 5,2,2,1"));
        assertEquals(1, parser.compute("???????#.????#?##. 1,1,4,1,3,2"));
        assertEquals(4, parser.compute(".???#??.?? 5,1"));
        assertEquals(3, parser.compute("#?#?#?????.??. 6,1,2"));
        assertEquals(4, parser.compute("????.???????#???##? 1,14"));
        assertEquals(2, parser.compute(".?#??#.???#??... 4,5"));
        assertEquals(3, parser.compute("#????###.??????#???? 2,3,2,7"));
        assertEquals(38, parser.compute(".???#??????#.#???? 4,1,1,1,1"));
        assertEquals(2, parser.compute("????#?.???.??# 6,2,3"));
        assertEquals(6, parser.compute("??#??#.????.?????? 2,1,1,1,6"));
        assertEquals(2, parser.compute(".???#????.??. 6,1,1"));
        assertEquals(1, parser.compute(".??#??#..####???..#? 6,6,1"));
        assertEquals(1, parser.compute("?.?#??????#???##?? 1,1,1,9,1"));
        assertEquals(4, parser.compute("?.??#????? 1,6"));
        assertEquals(3, parser.compute("????#?.????? 1,1,5"));
        assertEquals(2, parser.compute("??..??#..?##???# 1,1,1,5,1"));
        assertEquals(8, parser.compute("#?????.?#?.#?#. 1,1,2,1,1"));
        assertEquals(16, parser.compute("????#????.#???????? 4,2,4,1"));
        assertEquals(3, parser.compute("????#?.?#?. 1,1,3"));
        assertEquals(2, parser.compute("#??#???????????.?? 1,6,1,1,2,1"));
        assertEquals(1, parser.compute("???##?????..#.? 10,1,1"));
        assertEquals(15, parser.compute("??..?.???#?? 1,1,3"));
        assertEquals(6, parser.compute("??..?????.????.??? 1,2,2,1,2,1"));
        assertEquals(2, parser.compute(".?#??.???# 3,4"));
        assertEquals(7, parser.compute(".?????#???#? 1,1,1,1"));
        assertEquals(1, parser.compute("?????#???. 5,2"));
        assertEquals(12, parser.compute("?#???#??#.?????? 1,3,1,1,2"));
        assertEquals(11, parser.compute("..?#???????..#.? 2,3,1,1"));
        assertEquals(9, parser.compute("???#???#?.?.#??.???? 5,2,1,3,1,1"));
        assertEquals(4, parser.compute("????.#???##???.?? 3,8,1"));
        assertEquals(6, parser.compute("#?????#????.??#. 2,4,1,3"));
        assertEquals(16, parser.compute("???..???#??? 1,1,2,1"));
        assertEquals(6, parser.compute("????.?.#?????##?.?# 1,1,1,1,6,1"));
        assertEquals(10, parser.compute(".###???????#????. 3,2,5"));
        assertEquals(4, parser.compute("???#????.#?????#. 4,7"));
        assertEquals(3, parser.compute("##?.??#???.? 3,3"));
        assertEquals(1, parser.compute("#???#???#.. 3,5"));
        assertEquals(20, parser.compute("?????????.#?##? 1,1,2,4"));
        assertEquals(3, parser.compute("?.?#?#??#??##?.??? 1,2,9,1"));
        assertEquals(6, parser.compute(".???#????#???? 3,6"));
        assertEquals(4, parser.compute("????#????#?#???##??? 3,13"));
        assertEquals(4, parser.compute("????.??#?#??.# 1,7,1"));
        assertEquals(16, parser.compute("???.?????##?? 1,2,3"));
        assertEquals(18, parser.compute("????#???????#?.? 1,1,1,4"));
        assertEquals(1, parser.compute("??##?#????#??? 7,1,3"));
        assertEquals(13, parser.compute("#?##???????..##????? 6,2,2,1"));
        assertEquals(10, parser.compute("#???.????????? 2,2,3"));
        assertEquals(27, parser.compute("?.??.?###????????.. 1,6,1"));
        assertEquals(22, parser.compute("????.??????. 2,1,1,1"));
        assertEquals(3, parser.compute("???##???????#???.# 14,1"));
        assertEquals(9, parser.compute("??????#?#? 1,1,4"));
        assertEquals(1, parser.compute(".#??.???????# 3,1,4,1"));
        assertEquals(6, parser.compute("?.???#??????#??.?? 5,6,1"));
        assertEquals(3, parser.compute("?????##????.????#? 1,1,2,1,1,6"));
        assertEquals(27, parser.compute("???.?????.#?????? 1,1,1,2,4"));
        assertEquals(4, parser.compute("?.???.#??. 1,2"));
        assertEquals(2, parser.compute("?????.?..# 4,1"));
        assertEquals(6, parser.compute("???#?.??#??#?????#? 3,7,1"));
        assertEquals(13, parser.compute("????????##?.???? 1,3"));
        assertEquals(3, parser.compute("?.?.#??#??#?? 1,1,4,1"));
        assertEquals(1, parser.compute("...????##?.?#?.?#?# 7,1,4"));
        assertEquals(4, parser.compute("?##?????.?#??## 2,1,5"));
        assertEquals(2, parser.compute("???.??#??. 2,1,3"));
        assertEquals(1, parser.compute("#??#?##?#????# 1,1,7,1"));
        assertEquals(3, parser.compute(".###???#?????#?.?.?? 14,1"));
        assertEquals(1, parser.compute("?##..##?##?????#? 3,11"));
        assertEquals(6, parser.compute(".#?????.??? 1,2,2"));
        assertEquals(3, parser.compute("???#???#???#? 1,10"));
        assertEquals(7, parser.compute("?#???????. 3,2"));
        assertEquals(1, parser.compute(".?###???## 3,4"));
        assertEquals(1, parser.compute("?...#??#?..???## 2,2,2,2"));
        assertEquals(3, parser.compute("??#????.#. 4,1,1"));
        assertEquals(2, parser.compute(".??.####?#?..???#?. 1,6,5"));
        assertEquals(4, parser.compute("??#????#????# 2,2,3"));
        assertEquals(2, parser.compute("??#.?????#.?? 1,4,1,1"));
        assertEquals(1, parser.compute("?#??#???.????#.?#?? 8,1,1,1,1,1"));
        assertEquals(6, parser.compute("??.?..?#?.#???#? 1,2,5"));
        assertEquals(2, parser.compute("???###?#?????###? 6,1,7"));
        assertEquals(2, parser.compute("??#??.??#.?. 2,2"));
        assertEquals(16, parser.compute("???.?.??##??????#? 1,1,4,1,1,1"));
        assertEquals(8, parser.compute("???#???.?#??????? 5,1,5"));
        assertEquals(6, parser.compute("???.#????????.#. 1,1,5,1,1"));
        assertEquals(9, parser.compute("#???#?#??#?#????.?? 1,11,1"));
        assertEquals(11, parser.compute("??..?????# 1,1,1"));
        assertEquals(12, parser.compute("??#??????.?##?? 4,2,4"));
        assertEquals(4, parser.compute("#.#?#??????#?#???? 1,1,1,1,1,7"));
        assertEquals(6, parser.compute("????...??##????? 3,7"));
        assertEquals(8, parser.compute(".#.??#????.? 1,1,1,1"));
        assertEquals(1, parser.compute("???#?...????# 5,5"));
        assertEquals(4, parser.compute("?..????#?#??#??#### 1,12"));
        assertEquals(3, parser.compute("?##?#?..??? 4,1"));
        assertEquals(3, parser.compute("?????##?#??##??? 8,3"));
        assertEquals(3, parser.compute("?????##???#???????? 6,1,1,4,1"));
        assertEquals(5, parser.compute("?.??.????? 2,2"));
        assertEquals(1, parser.compute("??#???#????#??### 1,2,11"));
        assertEquals(3, parser.compute("#.????????#??#?. 1,1,10"));
        assertEquals(4, parser.compute("?????????#???.???? 2,1,8,1"));
        assertEquals(3, parser.compute("????.??#??#?##?? 4,9"));
        assertEquals(10, parser.compute("??????????#. 1,3,1,1"));
        assertEquals(9, parser.compute("??.?.??#???? 1,1,5"));
        assertEquals(6, parser.compute(".??????.??? 5,1"));
        assertEquals(2, parser.compute("#??#?????.?.#? 1,6,1,2"));
        assertEquals(2, parser.compute("???#?#?#..?????????? 1,3,1,4,3,1"));
        assertEquals(8, parser.compute(".?.?.??#?.#.?.???? 1,4,1,1,2"));
        assertEquals(3, parser.compute("??##?#????##? 7,2"));
        assertEquals(2, parser.compute("?????.??###???#?.? 1,3,9"));
        assertEquals(4, parser.compute("???#?.?#..?##??# 1,1,1,3,1"));
        assertEquals(8, parser.compute("???????.#?#?????? 2,1,1,6,1"));
        assertEquals(3, parser.compute("####?????? 5,2"));
        assertEquals(2, parser.compute("??#.???#?.? 2,3"));
        assertEquals(28, parser.compute("#??.???????.???#?#?? 1,1,1,2,4,1"));
        assertEquals(84, parser.compute("?#??????????????? 1,4,1,1"));
        assertEquals(14, parser.compute("##?????.?????????#? 2,3,2,5"));
        assertEquals(3, parser.compute(".?###??..?. 4,1"));
        assertEquals(1, parser.compute(".#??.??#??? 3,1"));
        assertEquals(2, parser.compute("??..???###?.???. 1,1,5,1,1"));
        assertEquals(86, parser.compute("???????????#??????? 1,3,4,2,1"));
        assertEquals(18, parser.compute("?????#?..????.???#? 5,1,1,1,2"));
        assertEquals(5, parser.compute("#?????????.#? 2,3,1"));
        assertEquals(3, parser.compute(".#?#??#????????#??.. 9,5"));
        assertEquals(4, parser.compute("?.#.???.??.??? 1,3,1,2"));
        assertEquals(1, parser.compute("???#??.?#.?. 2,3,2,1"));
        assertEquals(1, parser.compute("????..??#?#.# 4,1,3,1"));
        assertEquals(12, parser.compute("???###?#???#?????.? 6,2,2"));
        assertEquals(37, parser.compute("??????.???? 1,1,2"));
        assertEquals(14, parser.compute("???????#??? 1,2,2"));
        assertEquals(9, parser.compute("?.??#???????#?#?#??? 3,11"));
        assertEquals(24, parser.compute("?.???.??????#.? 1,1,1,3,1"));
        assertEquals(19, parser.compute("??#???????????? 5,2,3"));
        assertEquals(6, parser.compute("????????????.#??. 7,2,1"));
        assertEquals(3, parser.compute("?.??#???#? 2,3"));
        assertEquals(10, parser.compute("???#??????. 5,1"));
        assertEquals(14, parser.compute(".??#?.???#?????? 2,1,4,1"));
        assertEquals(5, parser.compute("?#??#??.???? 4,1"));
        assertEquals(18, parser.compute("???#???????????? 3,5"));
        assertEquals(3, parser.compute(".?.?#?#?#?..??? 7,1"));
        assertEquals(1, parser.compute("...???.??? 1,1,3"));
        assertEquals(4, parser.compute("?#?#???.??.. 1,1,1,1"));
        assertEquals(18, parser.compute("???##???????#??? 3,1,2"));
        assertEquals(2, parser.compute("..#????#????? 3,5"));
        assertEquals(1, parser.compute(".?.?#????#??#? 1,4"));
        assertEquals(1, parser.compute("???#..?#?#? 4,3"));
        assertEquals(5, parser.compute("???????##??#?.?#?#?? 1,9,2,1"));
        assertEquals(31, parser.compute("???.???????? 1,2,1,1"));
        assertEquals(1, parser.compute("##?#?#??##???.??.## 11,2,2"));
        assertEquals(12, parser.compute("??.?????.#?###????? 1,2,1,1,5,1"));
        assertEquals(2, parser.compute("???#???.#???#? 1,5,1,2"));
        assertEquals(4, parser.compute("?#????..?#??#???? 5,7"));
        assertEquals(1, parser.compute(".#??#?#.??.??# 6,3"));
        assertEquals(6, parser.compute("###?#?????#????? 6,1,1,1,1"));
        assertEquals(1, parser.compute("?????.?#??#?#????.? 3,1,6,1,1,1"));
        assertEquals(13, parser.compute("???.?????.?# 1,1,2,1"));
        assertEquals(3, parser.compute("?????#.#..#???? 3,2,1,1,1"));
        assertEquals(2, parser.compute("?.##?.???.??.? 1,3,2,2"));
        assertEquals(2, parser.compute("???#.?#????#?.?..?? 3,1,4,1,2"));
        assertEquals(7, parser.compute(".??#????.? 2,1"));
        assertEquals(2, parser.compute("??#?#????#??.? 7,1,1,1"));
        assertEquals(6, parser.compute("?#??#????.????# 8,1,1"));





    }

}
